---
# Secret for PowerDNS database user
apiVersion: v1
kind: Secret
metadata:
  name: pdns-db-secret
  namespace: powerdns
type: Opaque
stringData:
  pdns-user: "pdns"
  pdns-password: "L0g1tech"
  pdns-database: "powerdns"

---
# Job to initialize PowerDNS schema in PostgreSQL
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-pdns-init
  namespace: powerdns
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init-pdns-schema
        image: postgres:15
        command:
        - bash
        - -c
        - |
          set -e
          
          echo "Waiting for PostgreSQL primary to be ready..."
          until pg_isready -h postgres-primary -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done
          
          echo "PostgreSQL is ready! Creating PowerDNS user and database..."
          echo "Postgres password length: ${#POSTGRES_PASSWORD}"
          
          # Test connection first
          if ! PGPASSWORD="${POSTGRES_PASSWORD}" psql -h postgres-primary -U postgres -c "SELECT 1;" > /dev/null 2>&1; then
            echo "ERROR: Cannot connect to PostgreSQL with provided password"
            echo "Please verify postgres-secret has the correct password"
            exit 1
          fi
          
          echo "Connection successful! Creating user and database..."
          
          # Create pdns user
          PGPASSWORD="${POSTGRES_PASSWORD}" psql -h postgres-primary -U postgres -v ON_ERROR_STOP=1 -c "
            DO \$\$
            BEGIN
              IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '${PDNS_USER}') THEN
                CREATE USER ${PDNS_USER} WITH ENCRYPTED PASSWORD '${PDNS_PASSWORD}';
              END IF;
            END \$\$;
          "
          
          # Create database if it doesn't exist
          if ! PGPASSWORD="${POSTGRES_PASSWORD}" psql -h postgres-primary -U postgres -lqt | cut -d \| -f 1 | grep -qw "${PDNS_DATABASE}"; then
            echo "Creating database ${PDNS_DATABASE}..."
            PGPASSWORD="${POSTGRES_PASSWORD}" psql -h postgres-primary -U postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE ${PDNS_DATABASE} OWNER ${PDNS_USER};"
          else
            echo "Database ${PDNS_DATABASE} already exists"
          fi
          
          # Grant privileges
          PGPASSWORD="${POSTGRES_PASSWORD}" psql -h postgres-primary -U postgres -v ON_ERROR_STOP=1 -c "
            GRANT ALL PRIVILEGES ON DATABASE ${PDNS_DATABASE} TO ${PDNS_USER};
          "
          
          echo "PowerDNS user and database created successfully!"
          echo "Creating PowerDNS schema..."
          
          # Create PowerDNS schema using individual commands instead of heredoc
          PGPASSWORD="${PDNS_PASSWORD}" psql -h postgres-primary -U "${PDNS_USER}" -d "${PDNS_DATABASE}" -v ON_ERROR_STOP=1 <<'EOF'
            -- Domains table
            CREATE TABLE IF NOT EXISTS domains (
              id                    SERIAL PRIMARY KEY,
              name                  VARCHAR(255) NOT NULL,
              master                VARCHAR(128) DEFAULT NULL,
              last_check            INT DEFAULT NULL,
              type                  VARCHAR(8) NOT NULL,
              notified_serial       BIGINT DEFAULT NULL,
              account               VARCHAR(40) DEFAULT NULL,
              options               VARCHAR(64000) DEFAULT NULL,
              catalog               VARCHAR(255) DEFAULT NULL
            );
            
            CREATE UNIQUE INDEX IF NOT EXISTS name_index ON domains(name);
            CREATE INDEX IF NOT EXISTS catalog_idx ON domains(catalog);

            -- Records table
            CREATE TABLE IF NOT EXISTS records (
              id                    BIGSERIAL PRIMARY KEY,
              domain_id             INT DEFAULT NULL,
              name                  VARCHAR(255) DEFAULT NULL,
              type                  VARCHAR(10) DEFAULT NULL,
              content               VARCHAR(64000) DEFAULT NULL,
              ttl                   INT DEFAULT NULL,
              prio                  INT DEFAULT NULL,
              disabled              BOOL DEFAULT 'f',
              ordername             VARCHAR(255),
              auth                  BOOL DEFAULT 't',
              CONSTRAINT domain_exists FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE
            );

            CREATE INDEX IF NOT EXISTS rec_name_index ON records(name);
            CREATE INDEX IF NOT EXISTS nametype_index ON records(name,type);
            CREATE INDEX IF NOT EXISTS domain_id ON records(domain_id);
            CREATE INDEX IF NOT EXISTS ordername ON records(ordername);

            -- Supermasters table
            CREATE TABLE IF NOT EXISTS supermasters (
              ip                    INET NOT NULL,
              nameserver            VARCHAR(255) NOT NULL,
              account               VARCHAR(40) NOT NULL,
              PRIMARY KEY(ip, nameserver)
            );

            -- Comments table
            CREATE TABLE IF NOT EXISTS comments (
              id                    SERIAL PRIMARY KEY,
              domain_id             INT NOT NULL,
              name                  VARCHAR(255) NOT NULL,
              type                  VARCHAR(10) NOT NULL,
              modified_at           INT NOT NULL,
              account               VARCHAR(40) DEFAULT NULL,
              comment               TEXT NOT NULL,
              CONSTRAINT domain_exists FOREIGN KEY(domain_id) REFERENCES domains(id) ON DELETE CASCADE
            );

            CREATE INDEX IF NOT EXISTS comments_domain_id_idx ON comments (domain_id);
            CREATE INDEX IF NOT EXISTS comments_name_type_idx ON comments (name, type);
            CREATE INDEX IF NOT EXISTS comments_order_idx ON comments (domain_id, modified_at);

            -- Domain metadata table
            CREATE TABLE IF NOT EXISTS domainmetadata (
              id                    SERIAL PRIMARY KEY,
              domain_id             INT REFERENCES domains(id) ON DELETE CASCADE,
              kind                  VARCHAR(32),
              content               TEXT
            );

            CREATE INDEX IF NOT EXISTS domainidmetaindex ON domainmetadata(domain_id);

            -- Cryptokeys table
            CREATE TABLE IF NOT EXISTS cryptokeys (
              id                    SERIAL PRIMARY KEY,
              domain_id             INT REFERENCES domains(id) ON DELETE CASCADE,
              flags                 INT NOT NULL,
              active                BOOL,
              published             BOOL DEFAULT TRUE,
              content               TEXT
            );

            CREATE INDEX IF NOT EXISTS domainidindex ON cryptokeys(domain_id);

            -- TSIG keys table
            CREATE TABLE IF NOT EXISTS tsigkeys (
              id                    SERIAL PRIMARY KEY,
              name                  VARCHAR(255),
              algorithm             VARCHAR(50),
              secret                VARCHAR(255),
              CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
            );

            CREATE UNIQUE INDEX IF NOT EXISTS namealgoindex ON tsigkeys(name, algorithm);
            
            -- Grant all privileges to pdns user on all tables and sequences
            GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $PDNS_USER;
            GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $PDNS_USER;
            
            -- Verify tables were created
            SELECT tablename FROM pg_tables WHERE schemaname = 'public' ORDER BY tablename;
          EOF
          
          echo "PowerDNS schema created successfully!"
          echo "Initialization complete."
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: PDNS_USER
          valueFrom:
            secretKeyRef:
              name: pdns-db-secret
              key: pdns-user
        - name: PDNS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pdns-db-secret
              key: pdns-password
        - name: PDNS_DATABASE
          valueFrom:
            secretKeyRef:
              name: pdns-db-secret
              key: pdns-database