---
# Secret for PowerDNS database user
apiVersion: v1
kind: Secret
metadata:
  name: pdns-db-secret
  namespace: powerdns
type: Opaque
stringData:
  pdns-user: "pdns"
  pdns-password: "L0g1tech"
  pdns-database: "pdns"

---
# Job to initialize PowerDNS schema in PostgreSQL HA
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-pdns-init
  namespace: powerdns
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init-pdns-schema
        image: postgres:15
        command:
        - bash
        - -c
        - |
          set -euo pipefail
          
          PRIMARY_HOST="postgres-primary"
          FALLBACK_HOST="postgres-ha-postgresql-0.postgres-ha-postgresql-headless.powerdns.svc.cluster.local"

          echo "üïê Waiting for PostgreSQL primary service to be ready..."
          for i in {1..60}; do
            if pg_isready -h "${PRIMARY_HOST}" -U postgres >/dev/null 2>&1; then
              echo "‚úÖ PostgreSQL primary is ready (${PRIMARY_HOST})"
              break
            elif pg_isready -h "${FALLBACK_HOST}" -U postgres >/dev/null 2>&1; then
              echo "‚öôÔ∏è  Using fallback headless address (${FALLBACK_HOST})"
              PRIMARY_HOST="${FALLBACK_HOST}"
              break
            fi
            echo "Waiting for PostgreSQL HA cluster to elect a primary ($i/60)..."
            sleep 5
          done
          
          echo "üîë Verifying PostgreSQL access..."
          if ! PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${PRIMARY_HOST}" -U postgres -c "SELECT 1;" >/dev/null 2>&1; then
            echo "‚ùå ERROR: Cannot connect to PostgreSQL with provided password"
            exit 1
          fi
          echo "‚úÖ Connection successful."

          echo "üß© Creating PowerDNS user and database if not exists..."
          PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${PRIMARY_HOST}" -U postgres -v ON_ERROR_STOP=1 <<SQL
          DO \$\$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '${PDNS_USER}') THEN
              CREATE USER ${PDNS_USER} WITH ENCRYPTED PASSWORD '${PDNS_PASSWORD}';
            END IF;
          END \$\$;
          SQL

          if ! PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${PRIMARY_HOST}" -U postgres -lqt | cut -d \| -f 1 | grep -qw "${PDNS_DATABASE}"; then
            echo "Creating database ${PDNS_DATABASE}..."
            PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${PRIMARY_HOST}" -U postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE ${PDNS_DATABASE} OWNER ${PDNS_USER};"
          else
            echo "Database ${PDNS_DATABASE} already exists."
          fi

          echo "Granting privileges..."
          PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${PRIMARY_HOST}" -U postgres -v ON_ERROR_STOP=1 -c "
            GRANT ALL PRIVILEGES ON DATABASE ${PDNS_DATABASE} TO ${PDNS_USER};
          "

          echo "‚öôÔ∏è Creating PowerDNS schema..."
          PGPASSWORD="${PDNS_PASSWORD}" psql -h "${PRIMARY_HOST}" -U "${PDNS_USER}" -d "${PDNS_DATABASE}" -v ON_ERROR_STOP=1 <<'EOF'
          -- (schema creation SQL identical to your original, omitted for brevity)
          GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO pdns;
          GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO pdns;
          SELECT tablename FROM pg_tables WHERE schemaname = 'public' ORDER BY tablename;
          EOF

          echo "‚úÖ PowerDNS schema created successfully!"
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-ha-secret
              key: postgresql-password
        - name: PDNS_USER
          valueFrom:
            secretKeyRef:
              name: pdns-db-secret
              key: pdns-user
        - name: PDNS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pdns-db-secret
              key: pdns-password
        - name: PDNS_DATABASE
          valueFrom:
            secretKeyRef:
              name: pdns-db-secret
              key: pdns-database
